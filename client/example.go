// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "pei0804/goa-stater": example Resource Client
//
// Command:
// $ goagen
// --design=github.com/KokiKono/go_tutorial/design
// --out=$(GOPATH)/src/github.com/KokiKono/go_tutorial
// --version=v1.3.0

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// IDExamplePath computes a request path to the id action of example.
func IDExamplePath(id int) string {
	param0 := strconv.Itoa(id)

	return fmt.Sprintf("/examples/%s", param0)
}

// ID
func (c *Client) IDExample(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewIDExampleRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewIDExampleRequest create the request corresponding to the id action endpoint of the example resource.
func (c *Client) NewIDExampleRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.GeneralAuthSigner != nil {
		if err := c.GeneralAuthSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// MainExamplePath computes a request path to the main action of example.
func MainExamplePath() string {

	return fmt.Sprintf("/examples/main")
}

// main example
func (c *Client) MainExample(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewMainExampleRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewMainExampleRequest create the request corresponding to the main action endpoint of the example resource.
func (c *Client) NewMainExampleRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.GeneralAuthSigner != nil {
		if err := c.GeneralAuthSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// SubExamplePayload is the example sub action payload.
type SubExamplePayload struct {
	// message
	Message string `form:"message" json:"message" xml:"message"`
}

// SubExamplePath computes a request path to the sub action of example.
func SubExamplePath() string {

	return fmt.Sprintf("/examples/sub")
}

// sub example
func (c *Client) SubExample(ctx context.Context, path string, payload *SubExamplePayload, contentType string) (*http.Response, error) {
	req, err := c.NewSubExampleRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewSubExampleRequest create the request corresponding to the sub action endpoint of the example resource.
func (c *Client) NewSubExampleRequest(ctx context.Context, path string, payload *SubExamplePayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.GeneralAuthSigner != nil {
		if err := c.GeneralAuthSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}
