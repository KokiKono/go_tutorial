// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "pei0804/goa-stater": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/KokiKono/go_tutorial/design
// --out=$(GOPATH)/src/github.com/KokiKono/go_tutorial
// --version=v1.3.0

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"strconv"
)

// IDExampleContext provides the example id action context.
type IDExampleContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID int
}

// NewIDExampleContext parses the incoming request URL and body, performs validations and creates the
// context used by the example controller id action.
func NewIDExampleContext(ctx context.Context, r *http.Request, service *goa.Service) (*IDExampleContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := IDExampleContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) == 0 {
		rctx.ID = 0
	} else {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *IDExampleContext) OK(r *Messagetype) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.messagetype+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *IDExampleContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *IDExampleContext) Unauthorized(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *IDExampleContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *IDExampleContext) InternalServerError(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// MainExampleContext provides the example main action context.
type MainExampleContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewMainExampleContext parses the incoming request URL and body, performs validations and creates the
// context used by the example controller main action.
func NewMainExampleContext(ctx context.Context, r *http.Request, service *goa.Service) (*MainExampleContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := MainExampleContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *MainExampleContext) OK(r *Messagetype) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.messagetype+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *MainExampleContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *MainExampleContext) Unauthorized(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *MainExampleContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *MainExampleContext) InternalServerError(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// SubExampleContext provides the example sub action context.
type SubExampleContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *SubExamplePayload
}

// NewSubExampleContext parses the incoming request URL and body, performs validations and creates the
// context used by the example controller sub action.
func NewSubExampleContext(ctx context.Context, r *http.Request, service *goa.Service) (*SubExampleContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SubExampleContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// subExamplePayload is the example sub action payload.
type subExamplePayload struct {
	// message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// Finalize sets the default values defined in the design.
func (payload *subExamplePayload) Finalize() {
	var defaultMessage = ""
	if payload.Message == nil {
		payload.Message = &defaultMessage
	}
}

// Validate runs the validation rules defined in the design.
func (payload *subExamplePayload) Validate() (err error) {
	if payload.Message == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "message"))
	}
	return
}

// Publicize creates SubExamplePayload from subExamplePayload
func (payload *subExamplePayload) Publicize() *SubExamplePayload {
	var pub SubExamplePayload
	if payload.Message != nil {
		pub.Message = *payload.Message
	}
	return &pub
}

// SubExamplePayload is the example sub action payload.
type SubExamplePayload struct {
	// message
	Message string `form:"message" json:"message" xml:"message"`
}

// Validate runs the validation rules defined in the design.
func (payload *SubExamplePayload) Validate() (err error) {
	if payload.Message == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "message"))
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *SubExampleContext) OK(r *Messagetype) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.messagetype+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *SubExampleContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *SubExampleContext) Unauthorized(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *SubExampleContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *SubExampleContext) InternalServerError(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}
