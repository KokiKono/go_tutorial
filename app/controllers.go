// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "pei0804/goa-stater": Application Controllers
//
// Command:
// $ goagen
// --design=github.com/KokiKono/go_tutorial/design
// --out=$(GOPATH)/src/github.com/KokiKono/go_tutorial
// --version=v1.3.0

package app

import (
	"context"
	"github.com/goadesign/goa"
	"github.com/goadesign/goa/cors"
	"net/http"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Encoder.Register(goa.NewGobEncoder, "application/gob", "application/x-gob")
	service.Encoder.Register(goa.NewXMLEncoder, "application/xml")
	service.Decoder.Register(goa.NewJSONDecoder, "application/json")
	service.Decoder.Register(goa.NewGobDecoder, "application/gob", "application/x-gob")
	service.Decoder.Register(goa.NewXMLDecoder, "application/xml")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(goa.NewJSONDecoder, "*/*")
}

// ExampleController is the controller interface for the Example actions.
type ExampleController interface {
	goa.Muxer
	ID(*IDExampleContext) error
	Main(*MainExampleContext) error
	Sub(*SubExampleContext) error
}

// MountExampleController "mounts" a Example resource controller on the given service.
func MountExampleController(service *goa.Service, ctrl ExampleController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewIDExampleContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ID(rctx)
	}
	h = handleSecurity("generalAuth", h)
	service.Mux.Handle("GET", "/examples/:id", ctrl.MuxHandler("id", h, nil))
	service.LogInfo("mount", "ctrl", "Example", "action", "ID", "route", "GET /examples/:id", "security", "generalAuth")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewMainExampleContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Main(rctx)
	}
	h = handleSecurity("generalAuth", h)
	service.Mux.Handle("GET", "/examples/main", ctrl.MuxHandler("main", h, nil))
	service.LogInfo("mount", "ctrl", "Example", "action", "Main", "route", "GET /examples/main", "security", "generalAuth")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewSubExampleContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*SubExamplePayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Sub(rctx)
	}
	h = handleSecurity("generalAuth", h)
	service.Mux.Handle("POST", "/examples/sub", ctrl.MuxHandler("sub", h, unmarshalSubExamplePayload))
	service.LogInfo("mount", "ctrl", "Example", "action", "Sub", "route", "POST /examples/sub", "security", "generalAuth")
}

// unmarshalSubExamplePayload unmarshals the request body into the context request data Payload field.
func unmarshalSubExamplePayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &subExamplePayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	payload.Finalize()
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// SwaggerController is the controller interface for the Swagger actions.
type SwaggerController interface {
	goa.Muxer
	goa.FileServer
}

// MountSwaggerController "mounts" a Swagger resource controller on the given service.
func MountSwaggerController(service *goa.Service, ctrl SwaggerController) {
	initService(service)
	var h goa.Handler

	h = ctrl.FileHandler("/swagger.json", "swagger/swagger.json")
	service.Mux.Handle("GET", "/swagger.json", ctrl.MuxHandler("serve", h, nil))
	service.LogInfo("mount", "ctrl", "Swagger", "files", "swagger/swagger.json", "route", "GET /swagger.json")
}

// SwaggeruiController is the controller interface for the Swaggerui actions.
type SwaggeruiController interface {
	goa.Muxer
	goa.FileServer
}

// MountSwaggeruiController "mounts" a Swaggerui resource controller on the given service.
func MountSwaggeruiController(service *goa.Service, ctrl SwaggeruiController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/swaggerui/*filepath", ctrl.MuxHandler("preflight", handleSwaggeruiOrigin(cors.HandlePreflight()), nil))

	h = ctrl.FileHandler("/swaggerui/*filepath", "swaggerui/")
	h = handleSwaggeruiOrigin(h)
	service.Mux.Handle("GET", "/swaggerui/*filepath", ctrl.MuxHandler("serve", h, nil))
	service.LogInfo("mount", "ctrl", "Swaggerui", "files", "swaggerui/", "route", "GET /swaggerui/*filepath")

	h = ctrl.FileHandler("/swaggerui/", "swaggerui/index.html")
	h = handleSwaggeruiOrigin(h)
	service.Mux.Handle("GET", "/swaggerui/", ctrl.MuxHandler("serve", h, nil))
	service.LogInfo("mount", "ctrl", "Swaggerui", "files", "swaggerui/index.html", "route", "GET /swaggerui/")
}

// handleSwaggeruiOrigin applies the CORS response headers corresponding to the origin.
func handleSwaggeruiOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "*") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}
